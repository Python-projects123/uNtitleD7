import turtle
import colorsys
import math
import time

# Setup screen
screen = turtle.Screen()
screen.bgcolor("black")
screen.title("Fractal Rainbow Mandala")
screen.setup(width=800, height=800)
screen.tracer(0)  # Turn off automatic updates

# Setup turtles
agents = []
num_agents = 8  # Number of turtles drawing simultaneously
for _ in range(num_agents):
    t = turtle.Turtle()
    t.speed(0)
    t.width(2)
    t.hideturtle()
    agents.append(t)

# Parameters
angle_offset = 360 / num_agents
hue = 0
depth = 4           # Fractal depth
base_size = 100     # Base length of fractal branches
rotation = 0        # Rotation angle (animated)
frames = 1000       # Total frames of animation

# HSV to RGB conversion helper
def hsv_color(h):
    r, g, b = colorsys.hsv_to_rgb(h % 1.0, 1, 1)
    return r, g, b

# Recursive fractal function
def draw_fractal(t, x, y, angle, length, level, hue):
    if level == 0:
        return
    t.penup()
    t.goto(x, y)
    t.setheading(angle)
    t.pendown()

    t.color(hsv_color(hue))
    t.forward(length)
    end_x, end_y = t.pos()

    # Recurse two branches
    new_hue = hue + 0.02
    draw_fractal(t, end_x, end_y, angle - 30, length * 0.6, level - 1, new_hue)
    draw_fractal(t, end_x, end_y, angle + 30, length * 0.6, level - 1, new_hue)

# Animation loop
for frame in range(frames):
    screen.clear()
    screen.bgcolor("black")

    hue = frame / 360.0
    rotation += 1  # Slowly rotate the whole structure

    for i, t in enumerate(agents):
        angle = i * angle_offset + rotation
        x = math.cos(math.radians(angle)) * 50
        y = math.sin(math.radians(angle)) * 50
        draw_fractal(t, x, y, angle, base_size, depth, hue + i / num_agents)

    screen.update()
    time.sleep(0.01)  # Frame delay

turtle.done()
